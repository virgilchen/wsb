<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans default-autowire="byName" default-lazy-init="true">

    <bean id="bizSQLs" class="com.globalwave.common.db.BaseSQLs" >
      <property name="sqls">
        <map>

          <entry key="myTasks">
            <value>
              <![CDATA[
select
  o.*,
  e.*,
  c.*,
  b.business_name,
  p.procs_step_name,
  (select staff_name from staff_demo_rt s where s.staff_id=o.order_init_staff_id) as order_init_staff_name,
  (select staff_name from staff_demo_rt s where s.staff_id=e.event_staff_id) as event_staff_name
 from order_rt o, order_prod_pack_event_rt e, cust_demo_rt c, business_rt b, order_procs_rt p
where o.order_id=e.order_id
  and o.psdo_cust_id=c.psdo_cust_id
  and b.business_id=e.business_id
  and p.business_id=e.business_id
  and o.order_cur_status='S'
  and e.event_status='R'
  and p.procs_step_no=e.procs_step_no
  and (e.event_staff_id=[event_staff_id] or e.event_staff_id is null and p.procs_staff_role_id=[procs_staff_role_id])
order by o.order_id
              ]]>
            </value>
          </entry>

          <entry key="queryOrders">
            <value>
              <![CDATA[
select
  o.*,
  e.event_staff_id,
  e.event_id,
  e.event_status,
  c.cust_name,
  c.cust_phone_no,
  b.business_name,
  p.procs_step_name,
  s.staff_name as order_init_staff_name,
  (select staff_name from staff_demo_rt st where st.staff_id=e.event_staff_id) as event_staff_name
 from 
   order_rt o 
     left join staff_demo_rt s on s.staff_id=o.order_init_staff_id
     left join order_prod_pack_event_rt e on o.order_id=e.order_id and e.event_status='R'
     left join business_rt b on b.business_id=e.business_id
     left join order_procs_rt p on p.business_id=e.business_id and p.procs_step_no=e.procs_step_no, 
   cust_demo_rt c
where o.psdo_cust_id=c.psdo_cust_id
 {and s.staff_name like [order_init_staff_name]}
 {and c.cust_name like [psdo_cust_name]}
 {and o.order_no like [order_no]}
 {and o.order_init_staff_id=[order_init_staff_id]}
 {and o.order_cur_status=[order_cur_status]}
 {and o.psdo_cust_id=[psdo_cust_id]}
order by <<order_by>>
              ]]>
            </value>
          </entry>

          <entry key="advanceSearchOrders">
            <value>
              <![CDATA[
select
  o.*,
  c.cust_name,
  c.cust_phone_no,
  s.staff_name as order_init_staff_name,
  (select group_concat(b.business_name) from order_prod_pack_event_rt e left join business_rt b on b.business_id=e.business_id where o.order_id=e.order_id and e.event_status='R') procs_step_name
 from 
   order_rt o 
     left join staff_demo_rt s on s.staff_id=o.order_init_staff_id,
   cust_demo_rt c
where o.psdo_cust_id=c.psdo_cust_id
 {and s.staff_name like [order_init_staff_name]}
 {and c.cust_name like [psdo_cust_name]}
 {and o.order_no like [order_no]}
 {and o.order_init_staff_id=[order_init_staff_id]}
 {and o.order_cur_status=[order_cur_status]}
 {and o.psdo_cust_id=[psdo_cust_id]}
order by <<order_by>>
              ]]>
            </value>
          </entry>

          <entry key="queryOrderHistories">
            <value>
              <![CDATA[
select
  o.*,
  s.staff_name as order_init_staff_name
 from 
   order_rt o 
     left join staff_demo_rt s on s.staff_id=o.order_init_staff_id
where 1=1
 {and o.order_no like [order_no]}
 {and o.order_init_staff_id=[order_init_staff_id]}
 {and o.order_cur_status=[order_cur_status]}
 {and o.psdo_cust_id=[psdo_cust_id]}
order by o.order_id desc
              ]]>
            </value>
          </entry>


          <entry key="saveOpenOrderEvents">
            <value>
              <![CDATA[
insert into order_prod_pack_event_rt(
  event_time_stamp, order_id, business_id, procs_step_no, event_status
) 
select 
  sysdate(), [order_id] , business_id, procs_step_no, 'S'
 from order_procs_rt op
where exists(
  select 1 from product_rt p left join product_pack_detail_rt ppd on p.prod_id=ppd.prod_id
   where ppd.prod_pack_id in ([prod_pack_ids]) and p.business_id=op.business_id
)
and procs_step_no=0
              ]]>
            </value>
          </entry>



          <entry key="queryOrderProdPackByOrderId">
            <value>
              <![CDATA[
select op.*, p.prod_pack_name from order_prod_pack_rt op left join product_pack_rt p on op.prod_pack_id=p.prod_pack_id where op.order_id=[order_id] order by order_prod_pack_id
              ]]>
            </value>
          </entry>


          <entry key="queryOrderProdByOrderId">
            <value>
              <![CDATA[
select ppd.prod_pack_id, p.prod_name, b.business_name, b.business_id
 from order_prod_pack_rt opp , product_pack_detail_rt ppd, product_rt p, business_rt b
where opp.prod_pack_id=ppd.prod_pack_id
  and ppd.prod_id=p.prod_id
  and p.business_id=b.business_id
  and opp.order_id=[order_id]
              ]]>
            </value>
          </entry>


          <entry key="queryProdByProdPackId">
            <value>
              <![CDATA[
select p.*
 from product_pack_detail_rt ppd, product_rt p
where ppd.prod_id=p.prod_id
  and ppd.prod_pack_id=[prod_pack_id]
              ]]>
            </value>
          </entry>
          


          <entry key="queryAllSelectableProducts">
            <value>
              <![CDATA[
select p.prod_id as id, p.*,b.business_name, 1 as quantity from product_rt p inner join business_rt b on p.business_id=b.business_id
              ]]>
            </value>
          </entry>
          


          <entry key="queryAllSelectedProductDetails">
            <value>
              <![CDATA[
select p.prod_id as id, p.*,b.business_name, d.quantity 
  from product_rt p 
              inner join business_rt b on p.business_id=b.business_id
              inner join product_pack_detail_rt d on d.prod_id=p.prod_id
where d.prod_pack_id=[id]
              ]]>
            </value>
          </entry>
          


          <entry key="queryBusinessesInProductPack">
            <value>
              <![CDATA[
select 
  p.*,
  b.business_id as id, 
  b.*,
  (select procs_staff_role_id from order_procs_rt op where op.business_id=b.business_id and procs_step_no=0) as procs_staff_role_id,

  (select ifnull(sum(remain_amount),0) 
     from biz_assets_holding ah 
    where (ah.expire_date is null or ah.expire_date>=sysdate()) 
      and (ah.effect_date is null or ah.effect_date<=sysdate())
      and ah.remain_amount>0
      and ah.customer_id=[customer_id] 
      and ah.assets_type=1 
      and ah.assets_id=p.prod_id ) as available_amount
  from product_rt p 
              inner join business_rt b on p.business_id=b.business_id
              inner join product_pack_detail_rt d on d.prod_id=p.prod_id
where d.prod_pack_id=[id]
order by b.business_name, p.prod_name
              ]]>
            </value>
          </entry>
          


          <entry key="pickUpTask">
            <value>
              <![CDATA[
update order_prod_pack_event_rt
   set event_staff_id=[event_staff_id] 
 where event_staff_id is null 
   and event_id=[id]
              ]]>
            </value>
          </entry>
          

          <entry key="queryOrderEventsWithProduct">
            <value>
              <![CDATA[
select
  e.* ,
  e.event_id as id,
  s.staff_name,
  ifnull(r.staff_role_name, (select sr.staff_role_name from staff_role_demo_rt sr where sr.staff_role_id=p.procs_staff_role_id)) as staff_role_name,
  p.procs_step_name,
  b.business_name,
  timestampdiff(minute, event_time_stamp, event_duration) as minute_duration,

  prod.*,

  (select ifnull(sum(remain_amount),0) 
     from biz_assets_holding ah 
    where (ah.expire_date is null or ah.expire_date>=sysdate()) 
      and (ah.effect_date is null or ah.effect_date<=sysdate())
      and ah.remain_amount>0
      and ah.customer_id=[customer_id] 
      and ah.assets_type=1 
      and ah.assets_id=prod.prod_id 
      and ah.pro_assets_id=pd.prod_pack_id ) as available_amount
  from order_prod_pack_event_rt e 
           inner join product_pack_detail_rt pd on e.prod_pack_id=pd.prod_pack_id
           inner join product_rt prod on pd.prod_id=prod.prod_id
           left join staff_demo_rt s on e.event_staff_id=s.staff_id
           left join business_rt b on e.business_id=b.business_id
           left join staff_role_demo_rt r on s.staff_role_id=r.staff_role_id,
       order_procs_rt p
where e.business_id=p.business_id 
  and e.procs_step_no=p.procs_step_no  
  and e.order_id=[order_id]
order by b.business_name, prod.prod_name
              ]]>
            </value>
          </entry>

          
          <entry key="queryOrderEvents">
            <value>
              <![CDATA[
select
  e.* ,
  e.event_id as id,
  s.staff_name,
  ifnull(r.staff_role_name, (select sr.staff_role_name from staff_role_demo_rt sr where sr.staff_role_id=p.procs_staff_role_id)) as staff_role_name,
  p.procs_step_name,
  b.business_name,
  timestampdiff(minute, event_time_stamp, event_duration) as minute_duration
  from order_prod_pack_event_rt e 
           left join staff_demo_rt s on e.event_staff_id=s.staff_id
           left join business_rt b on e.business_id=b.business_id
           left join staff_role_demo_rt r on s.staff_role_id=r.staff_role_id,
       order_procs_rt p
where e.business_id=p.business_id 
  and e.procs_step_no=p.procs_step_no  
  and e.order_id=[order_id]
              ]]>
            </value>
          </entry>

          

          <entry key="queryAccessablePagesByRole">
            <value>
              <![CDATA[

select p.*, rp.staff_role_id from page_id_dim p left join role_page_rt rp on p.page_id = rp.page_id and rp.staff_role_id=[staff_role_id]
              ]]>
            </value>
          </entry>

          <entry key="queryPagesByRole">
            <value>
              <![CDATA[
select p.* from page_id_dim p, role_page_rt rp where p.page_id=rp.page_id and rp.staff_role_id=[staff_role_id]
              ]]>
            </value>
          </entry>
          
         
          <entry key="businessHasUsed">
            <value>
              <![CDATA[
          
select business_id from business_rt b 
 where exists(select 1 from product_rt p where p.business_id=b.business_id)
  and b.business_id=[id]
              ]]>
            </value>
          </entry>

          <entry key="queryAvailableAssetsHolding">
            <value>
              <![CDATA[
select *, ifnull(expire_date, '2999-01-01') order_by_date 
  from biz_assets_holding 
 where (expire_date is null or expire_date>=sysdate()) 
   and (effect_date is null or effect_date<=sysdate())
   and remain_amount>0
   and assets_type=[assets_type]
   and assets_id=[assets_id]
   and customer_id=[customer_id]
order by order_by_date
              ]]>
            </value>
          </entry>

          <entry key="assetsHoldingConfirm">
            <value>
              <![CDATA[
update biz_assets_holding h 
            inner join (select assets_holding_id, sum(amount) confirm_amount from biz_assets_transaction t where t.transaction_type=-1 and t.order_id=[order_id] group by assets_holding_id) t
                  on h.id=t.assets_holding_id
  set h.used_amount = h.used_amount + t.confirm_amount,
      h.pending_amount = h.pending_amount - t.confirm_amount,
      h.updated_by = [updated_by],
      h.updated_on = sysdate() 
              ]]>
            </value>
          </entry>
         
          <entry key="assetsTransactionConfirm">
            <value>
              <![CDATA[
insert into `biz_assets_transaction`(
    `assets_holding_id`,
    `order_id`,
    `transaction_type`,
    `amount`,
    `version_id`,
    `record_status`,
    `created_by`,
    `created_on`,
    `updated_by`,
    `updated_on`
)
SELECT 
    `assets_holding_id`,
    `order_id`,
    0 as `transaction_type`,
    `amount`,
    `version_id`,
    'A' as `record_status`,
    [created_by] as `created_by`,
    sysdate() `created_on`,
    [updated_by] as `updated_by`,
    sysdate() `updated_on`
 FROM `biz_assets_transaction`
where transaction_type=-1 and order_id=[order_id]
              ]]>
            </value>
          </entry>
          
          
          <entry key="queryAssetsHolding">
            <value>
              <![CDATA[
select
     b.business_name,
     p.prod_name,
     h.*
   from biz_assets_holding h 
             left join product_rt p on h.assets_id=p.prod_id
             left join business_rt b on p.business_id=b.business_id
  where h.assets_type=1 
    and customer_id=[customer_id] 
              ]]>
            </value>
          </entry>
          
          
          <entry key="queryProductPack4Selection">
            <value>
              <![CDATA[
select * 
  from product_pack_rt pp
 where 1=1
  {and pp.prod_pack_name like [prod_pack_name]}
  {and exists(select 1 from biz_assets_holding ah 
                      where (ah.expire_date is null or ah.expire_date>=sysdate()) 
                        and (ah.effect_date is null or ah.effect_date<=sysdate())
                        and ah.remain_amount>0
                        and ah.customer_id=[customer_id] 
                        and ah.assets_type=1 
                        and ah.pro_assets_id=pp.prod_pack_id)}
              ]]>
            </value>
          </entry>
          
          
          
          <entry key="queryPackProductNames">
            <value>
              <![CDATA[
select d.prod_pack_id, group_concat(prod_name) as prod_names 
  from product_pack_detail_rt d join product_rt p on d.prod_id=p.prod_id 
 where d.prod_pack_id=[prod_pack_id]
   and d.prod_id in ([prod_ids])
 group by prod_pack_id
              ]]>
            </value>
          </entry>
          
          
        </map>
      </property>
    </bean>
      
</beans>